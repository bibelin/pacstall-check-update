#!/usr/bin/env python3
import argparse, urllib.request, json, subprocess, os, re, webbrowser
from typing import List, Tuple, Any

BOLD='\033[1m'
NC='\033[0m'

def run_parser() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description='A script to check for the Pacstall update. When started without arguments or with "-u", "-1" or "-n", it checks for an update and executes an action defined by said flags.',
        epilog='https://github.com/bibelin/pacstall-check-update'
    )
    parser.add_argument(
        '-u', '--update',
        help='run "pacstall -U"', action='store_true'
    )
    parser.add_argument(
        '-1', '--non-zero',
        help='return non-zero exit status', action='store_true'
    )
    parser.add_argument(
        '-n', '--notify',
        help='send desktop notification', action='store_true'
    )
    parser.add_argument(
        '--notify-icon', type=str,
        help='icon to use in notifications (only usable for "-n" and "--systemd-service=enable")',
        default='update-notifier', metavar='ICON_NAME'
    )
    parser.add_argument(
        '--systemd-service',
        help='enable/disable systemd user service that notifies if there\'s an update available',
        choices=['enable', 'disable']
    )
    return parser.parse_args()

def get_github_release() -> List[Any]:
    data: List[Any]
    with urllib.request.urlopen('https://api.github.com/repos/pacstall/pacstall/releases?page=1&per_page=1') as url:
        data = json.load(url)
    return data

def get_version_color(search_text: str) -> str:
    try:
        match: re.Match[str] | None = re.search(
            'https://www.htmlcsscolor.com/preview/128x128/(.+).png',
            search_text
        )
        if match:
            hex: str = match.group(1)
            rgb: Tuple[str, ...] = tuple(str(int(hex[i:i+2], 16)) for i in (0, 2, 4))
            return f'{BOLD}\x1b[38;2;{rgb[0]};{rgb[1]};{rgb[2]}m'
        return BOLD
    except:
        return BOLD

def check_version(update: bool, non_zero: bool, notify: bool, notify_icon: str) -> int:
    data: List[Any] = get_github_release()
    new_version: str = data[0]['tag_name']
    release_page: str = data[0]['html_url']
    new_color: str = get_version_color(data[0]['body'])

    pacstall_v: bytes = subprocess.check_output(['pacstall', '-V'])
    current_version: str = pacstall_v.decode('utf-8').split()[0]

    if current_version != new_version:
        print(f'{BOLD}Pacstall{NC} can be updated to version {new_color}{new_version}{NC}')
        if notify:
            cmd: List[str] = ['notify-send']
            ns_v: bytes = subprocess.check_output(['notify-send', '-v'])
            ns_vl: List[str] = ns_v.decode('utf-8').split(' ')[1].split('.')
            ns_vt: Tuple[int, ...] = tuple(int(n) for n in ns_vl)
            # -A/--action option was added in v0.7.10 of libnotify
            if ns_vt[0] > 0 or ns_vt[1] > 7 or (ns_vt[1] == 7 and ns_vt[2] >= 10):
                cmd.extend(['-A', 'open=Open Release Page'])
            cmd.extend(['-i', notify_icon, 'Pacstall update available', f'New version: {new_version}'])

            notification: bytes = subprocess.check_output(cmd)
            if notification.decode('utf-8').strip() == 'open':
                webbrowser.open_new_tab(release_page)
        if update:
            print('Executing "pacstall -U"...')
            subprocess.run(['pacstall', '-U', 'pacstall', 'master'])
        if non_zero:
            return 1
    return 0

def systemd_running() -> bool:
    state: str
    try:
        state = subprocess.check_output(['systemctl', 'is-system-running']).decode('utf-8')
    except subprocess.CalledProcessError as e:
        state = e.output.decode('utf-8')
    state = state.strip()
    if state == 'running' or state == 'degraded':
        return True
    else:
        print(f'systemd isn\'t running. Current state: {state}')
        return False

def create_service(name: str, icon: str) -> None:
    prog_path: str = os.path.abspath(__file__)
    prog_name: str = os.path.splitext(os.path.basename(prog_path))[0]
    service: str = f'''# Auto-generated by {prog_name}
[Unit]
Description=Check Pacstall updates
After=graphical-session.target
After=network-online.target

[Service]
Type=oneshot
ExecStart={prog_path} -n --notify-icon={icon}
'''
    timer: str = f'''# Auto-generated by {prog_name}
[Unit]
Description=Check Pacstall updates every 12h and on login
After=graphical-session.target
After=network-online.target

[Timer]
OnStartupSec=5s
OnUnitActiveSec=12h

[Install]
WantedBy=timers.target
'''
    xdg_cfg: str = os.environ['XDG_CONFIG_HOME'] \
        if 'XDG_CONFIG_HOME' in os.environ \
        else f'{os.environ["HOME"]}/.config'
    with open(f'{xdg_cfg}/systemd/user/{prog_name}.service', 'w') as f:
        f.write(service)
    with open(f'{xdg_cfg}/systemd/user/{prog_name}.timer', 'w') as f:
        f.write(timer)
    subprocess.run(['systemctl', '--user', 'daemon-reload'])

def edit_service(state: str, icon: str) -> int:
    NAME: str = 'pacstall-check-update'
    if not systemd_running():
        return 1
    if state == 'enable':
        create_service(NAME, icon)
    subprocess.run(['systemctl', '--user', state, f'{NAME}.timer'])
    subprocess.run(['systemctl', '--user', 'stop', f'{NAME}.timer'])
    service_enabled: bool = (subprocess.run([
        'systemctl', '--user', 'is-enabled', f'{NAME}.timer'
        ], capture_output=True).returncode == 0)
    if service_enabled:
        subprocess.run(['systemctl', '--user', 'restart', f'{NAME}.timer'])
    return 0

exit_status: int = 0
args: argparse.Namespace = run_parser()
if args.systemd_service != None:
    exit_status = edit_service(args.systemd_service, args.notify_icon)
else:
    exit_status = check_version(args.update, args.non_zero, args.notify, args.notify_icon)
exit(exit_status)
